"use client";
import { useEffect, useRef, useState } from "react";

const ALIASES: Record<string,string> = {
  "harry smith": "Harrismith",
  "harrie smith": "Harrismith",
  "harriesmith": "Harrismith",
  "volker park": "Wilgepark",   // common misspelling
  "volkier park": "Wilgepark"
};

function normalizeQuery(q: string){
  const k = q.trim().toLowerCase();
  return ALIASES[k] ?? q;
}

export default function AddressAutocomplete({
  value, onChange, bias
}:{
  value:string;
  onChange:(v:{address:string;lat?:number;lng?:number})=>void;
  bias?:{ province?:string; city?:string };
}){
  const rootRef = useRef<HTMLDivElement>(null);
  const [q,setQ] = useState(value);
  const [opts,setOpts] = useState<any[]>([]);
  const [open,setOpen] = useState(false);

  useEffect(()=>{
    const t = setTimeout(async ()=>{
      if(!q || q.length<2){ setOpts([]); setOpen(false); return; }
      const nq = normalizeQuery(q);
      const url = `/api/geocode?q=${encodeURIComponent(nq)}${bias?.province?`&province=${encodeURIComponent(bias.province)}`:""}${bias?.city?`&city=${encodeURIComponent(bias.city)}`:""}`;
      const r = await fetch(url); const data = await r.json();
      const list = data.features?.slice(0,8) || [];
      setOpts(list); setOpen(list.length>0);
    }, 200);
    return ()=> clearTimeout(t);
  }, [q, bias?.province, bias?.city]);

  useEffect(()=>{
    function onDoc(e:MouseEvent){ if(!rootRef.current?.contains(e.target as Node)) setOpen(false) }
    function onKey(e:KeyboardEvent){ if(e.key==="Escape") setOpen(false) }
    document.addEventListener("mousedown", onDoc);
    document.addEventListener("keydown", onKey);
    return ()=>{ document.removeEventListener("mousedown", onDoc); document.removeEventListener("keydown", onKey); }
  },[]);

  return (
    <div ref={rootRef} style={{ position:"relative" }}>
      <input
        style={{ width:"100%", padding:"8px 10px", border:"1px solid #d1d5db", borderRadius:12 }}
        value={q}
        onFocus={()=> setOpen(opts.length>0)}
        onChange={e=>{ setQ(e.target.value); setOpen(true); }}
        placeholder="Type an address (e.g. 'Harrismith', '12 West St, Sandton')"
      />
      {open && opts.length>0 && (
        <div
          style={{ position:"absolute", zIndex:20, marginTop:4, width:"100%", background:"#fff",
                   border:"1px solid #e5e7eb", borderRadius:12, boxShadow:"0 4px 16px rgba(0,0,0,0.08)", overflow:"hidden" }}
        >
          {opts.map((f:any,i:number)=>{
            const name = f.place_name || f.properties?.label || f.display_name;
            const center = f.center || f.geometry?.coordinates;
            const lng = center?.[0], lat = center?.[1];
            return (
              <button
                key={i} type="button"
                style={{ display:"block", width:"100%", textAlign:"left", padding:"10px 12px", borderBottom:"1px solid #f3f4f6", background:"white", cursor:"pointer" }}
                onClick={()=>{ onChange({ address:String(name), lat, lng }); setQ(String(name)); setOpen(false); setOpts([]); }}
              >
                {String(name)}
              </button>
            );
          })}
        </div>
      )}
    </div>
  );
}